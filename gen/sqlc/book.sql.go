// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: book.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBook = `-- name: CreateBook :one
INSERT INTO "Book" (id, name)
VALUES ($1, $2)
RETURNING id, name, created_at
`

type CreateBookParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook, arg.ID, arg.Name)
	var i Book
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM "Book"
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, name, created_at FROM "Book"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id uuid.UUID) (Book, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i Book
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const updateBook = `-- name: UpdateBook :one
UPDATE "Book"
SET 
  name = COALESCE($1, name)
WHERE id = $2
RETURNING id, name, created_at
`

type UpdateBookParams struct {
	Name pgtype.Text `json:"name"`
	ID   uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, updateBook, arg.Name, arg.ID)
	var i Book
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
