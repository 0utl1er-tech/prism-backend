// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: status.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createStatus = `-- name: CreateStatus :one
INSERT INTO "Status" (id, name, effective, ng)
VALUES ($1, $2, $3, $4)
RETURNING id, name, effective, ng, created_at
`

type CreateStatusParams struct {
	ID        uuid.UUID   `json:"id"`
	Name      string      `json:"name"`
	Effective pgtype.Bool `json:"effective"`
	Ng        pgtype.Bool `json:"ng"`
}

func (q *Queries) CreateStatus(ctx context.Context, arg CreateStatusParams) (Status, error) {
	row := q.db.QueryRow(ctx, createStatus,
		arg.ID,
		arg.Name,
		arg.Effective,
		arg.Ng,
	)
	var i Status
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Effective,
		&i.Ng,
		&i.CreatedAt,
	)
	return i, err
}

const getStatus = `-- name: GetStatus :one
SELECT id, name, effective, ng, created_at FROM "Status"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStatus(ctx context.Context, id uuid.UUID) (Status, error) {
	row := q.db.QueryRow(ctx, getStatus, id)
	var i Status
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Effective,
		&i.Ng,
		&i.CreatedAt,
	)
	return i, err
}
