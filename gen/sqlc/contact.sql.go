// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: contact.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createContact = `-- name: CreateContact :one
INSERT INTO "Contact" (id, customer_id, staff_id, phone, mail, fax)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, customer_id, staff_id, phone, mail, fax, created_at
`

type CreateContactParams struct {
	ID         uuid.UUID   `json:"id"`
	CustomerID uuid.UUID   `json:"customer_id"`
	StaffID    pgtype.UUID `json:"staff_id"`
	Phone      string      `json:"phone"`
	Mail       pgtype.Text `json:"mail"`
	Fax        pgtype.Text `json:"fax"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, createContact,
		arg.ID,
		arg.CustomerID,
		arg.StaffID,
		arg.Phone,
		arg.Mail,
		arg.Fax,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.StaffID,
		&i.Phone,
		&i.Mail,
		&i.Fax,
		&i.CreatedAt,
	)
	return i, err
}

const getContact = `-- name: GetContact :one
SELECT id, customer_id, staff_id, phone, mail, fax, created_at FROM "Contact"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetContact(ctx context.Context, id uuid.UUID) (Contact, error) {
	row := q.db.QueryRow(ctx, getContact, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.StaffID,
		&i.Phone,
		&i.Mail,
		&i.Fax,
		&i.CreatedAt,
	)
	return i, err
}
