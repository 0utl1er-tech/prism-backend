// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: staff.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createStaff = `-- name: CreateStaff :one
INSERT INTO "Staff" (id, name, sex)
VALUES ($1, $2, $3)
RETURNING id, name, sex, created_at
`

type CreateStaffParams struct {
	ID   uuid.UUID   `json:"id"`
	Name pgtype.Text `json:"name"`
	Sex  pgtype.Text `json:"sex"`
}

func (q *Queries) CreateStaff(ctx context.Context, arg CreateStaffParams) (Staff, error) {
	row := q.db.QueryRow(ctx, createStaff, arg.ID, arg.Name, arg.Sex)
	var i Staff
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Sex,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStaff = `-- name: DeleteStaff :exec
DELETE FROM "Staff"
WHERE id = $1
`

func (q *Queries) DeleteStaff(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteStaff, id)
	return err
}

const getStaff = `-- name: GetStaff :one
SELECT id, name, sex, created_at FROM "Staff"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStaff(ctx context.Context, id uuid.UUID) (Staff, error) {
	row := q.db.QueryRow(ctx, getStaff, id)
	var i Staff
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Sex,
		&i.CreatedAt,
	)
	return i, err
}

const updateStaff = `-- name: UpdateStaff :one
UPDATE "Staff"
SET 
  name = COALESCE($1, name),
  sex = COALESCE($2, sex)
WHERE id = $3
RETURNING id, name, sex, created_at
`

type UpdateStaffParams struct {
	Name pgtype.Text `json:"name"`
	Sex  pgtype.Text `json:"sex"`
	ID   uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateStaff(ctx context.Context, arg UpdateStaffParams) (Staff, error) {
	row := q.db.QueryRow(ctx, updateStaff, arg.Name, arg.Sex, arg.ID)
	var i Staff
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Sex,
		&i.CreatedAt,
	)
	return i, err
}
