// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customer.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO "Customer" (id, book_id, category_id, name, corporation, address, leader, pic, memo)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, book_id, category_id, name, corporation, address, leader, pic, memo, created_at
`

type CreateCustomerParams struct {
	ID          uuid.UUID   `json:"id"`
	BookID      uuid.UUID   `json:"book_id"`
	CategoryID  pgtype.UUID `json:"category_id"`
	Name        string      `json:"name"`
	Corporation pgtype.Text `json:"corporation"`
	Address     pgtype.Text `json:"address"`
	Leader      pgtype.UUID `json:"leader"`
	Pic         pgtype.UUID `json:"pic"`
	Memo        pgtype.Text `json:"memo"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.ID,
		arg.BookID,
		arg.CategoryID,
		arg.Name,
		arg.Corporation,
		arg.Address,
		arg.Leader,
		arg.Pic,
		arg.Memo,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.CategoryID,
		&i.Name,
		&i.Corporation,
		&i.Address,
		&i.Leader,
		&i.Pic,
		&i.Memo,
		&i.CreatedAt,
	)
	return i, err
}
